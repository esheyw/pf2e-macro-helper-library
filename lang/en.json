{
  "MHL": {
    "Count": "Count",
    "Current": "Current",
    "CurrentValue": "Current Value",
    "DefaultValue": "Default Value",
    "Group": "Group",
    "HasDefault": "Has Default",
    "IsDefault": "Is Default",
    "NotApplicable": "N/A",
    "SetTo": "Set To",
    "Visible": "Visible",
    "Grammar": {
      "Articles": {
        "An": "an",
        "A": "a",
        "The": "the"
      }
    },
    "PickAThing": {
      "Title": "Pick A Thing",
      "Error": {
        "ThingsFormat": "`things` must be an array of \\{name: string, value: any, img?: string, identifier?: string} objects.",
        "MalformedThing": "Provided thing lacked valid label or value."
      }
    },
    "SettingsManager": {
      "Reset": {
        "Title": "Reset to Default",
        "Body": "Reset <strong>{setting}</strong> to default value (<code>{value}</code>)? <br><em>Note: This will apply immediately to the actual setting, not just the input in the settings window.</em>",
        "Tooltip": "Reset this setting to its default value",
        "IsDefault": "Setting is currently equal to its default value"
      },
      "ResetAll": {
        "Title": "Reset All to Default",
        "Header": "Reset All {module} Settings?",
        "Body": "Reset all <strong>{module}</strong> settings to their default values ({count} settings currently not default)? <br><em>Note: This will apply immediately to the actual settings, not just the inputs in the settings window.</em>",
        "Tooltip": "Reset all of this module's settings to default values",
        "AllDefault": "All settings are currently equal to their default value"
      },
      "ColorPicker": {
        "ValidHexCode": "Must be a # followed by a valid 6-character hex color code"
      },
      "Error": {
        "Hooks": {
          "BadHook": "Hook data for setting {setting} of {module} is malformed; Must be an object containing a string `hook` key.",
          "RequiresAction": "Hook {hook} for setting {setting} of {module} requires an `action` key containing a function.",
          "TestFunction": "Hook data for setting {setting} of {module} is malformed; `test`, if provided, must be a function."
        },
        "InvalidSettingData": "Setting `{setting}` for module {module} failed to validate and was not registered.",
        "NoValidSettings": "No valid settings could be retrieved from passed data for module {module}.",
        "BadModuleID": "moduleID must be a string module ID or a Module object reference.",
        "Visibility": {
          "UnknownDependency": "Setting {dependsOn} not found, so it cannot be predicated on for visibility for setting {setting} of {module}.",
          "BadObject": "Visibility data for setting {setting} of {module} is malformed; requires a string `dependsOn` key referencing a valid setting.",
          "TestFunction": "Visibility data for setting {setting} of {module} is malformed; `test`, if provided, must be a function.",
          "BadFormat": "Visibility data for setting {setting} must be either a string setting ID (with optional ! prefix) or an object containing such under the `dependsOn` key, with an optional `test` function key."
        },
        "DuplicateSetting": "Setting ID \"{setting}\" already exists for {module}.",
        "Button": {
          "BadFormat": "Button data must be an object with at least an `action` key containing a function.",
          "Label": "A setting's `button` data must contain a `label` key, either string or null (for localization key inference).",
          "Action": "A button replacement action must be a function."
        },
        "NoDefault": "Setting {setting} of {module} does not have a default value recorded and cannot be reset.",
        "NotRegistered": "Setting {setting} is not registered for {module}.",
        "InvalidSettingsMap": "Settings data Map must be entirely string keys and object values.",
        "InvalidSettingsObject": "Settings data object must be entirely string keys and object values.",
        "InvalidSettingsArray": "Settings data Array must be entirely objects with string `id` keys.",
        "InvalidSettingsUnknown": "Settings data of unknown format cannot be processed."
      },
      "Warning": {
        "CacheMiss": "Cache miss retrieving setting {key} from module {module}",
        "RetrievalBeforeInit": "Attempting to retrive setting \"{key}\" of {module} but the settings manager is not yet initialized, returning undefined."
      }
    },
    "Dialog": {
      "Warning": {
        "FormLacksName": "Form with no `name` found, falling back on numeric key.",
        "RequiredFields": "This dialog requires one or more fields to be non-empty: {fields}"
      },
      "Error": {
        "TemplateFailure": "The template filepath or literal passed to MHLDialog failed to compile properly.",
        "FormRequiresName": "One or more of the forms provided lacks a `name` property.",
        "ReservedKeys": "The contentData object must not contain any of the following reserved keys: {keys}",
        "BadValidator": "The supplied validator must either be a function or an array of value names required to be non-empty."
      }
    },
    "Prompt": {
      "SetAllSelected": "Set All Selected",
      "SetIndividually": "Set Individually"
    },
    "Macro": {
      "DropHeldTorch": {
        "Error": {
          "ItemPilesDependency": "This macro requires the Item Piles module active in this world to function."
        }
      },
      "FascinatingPerformance": {
        "Error": {
          "MustHaveFeat": "Selected actor must have the Fascinating Performance feat.",
          "MinimumTrained": "Must be at least Trained in Performance to use, or even have taken, Fascinating Performance.",
          "SingleTargetOnly": "You are only Trained in performance, so are limited to a single target.",
          "FourTargetsOnly": "You are only Expert in performance, so are limited to 4 targets.",
          "TenTargetsOnly": "You are only Master in performance, so are limited to 10 targets."
        },
        "Warning": {
          "TargetImmune": "Target \"{name}\" is immune to being fascinated."
        }
      },
      "LashingCurrents": {
        "Info": {
          "Removing": "Removing Lashing Currents rules from \"{name}\"."
        },
        "Error": {
          "NoneSelected": "No weapon selected.",
          "NoExistingFound": "No old-style Lashing Currents weapon found on the actor of selected token \"{name}\"."
        }
      },
      "UpdateInitiativeStatistics": {
        "Error": {
          "NoValidTokens": "None of the selected tokens are PCs or NPCs that are neither minions nor eidolons."
        },
        "AllSharedSkills": "Skills shared by all selected actors: ",
        "DisabledTooltip": "Being overridden by the all selector above."
      }
    },
    "GetAllFromAllowedPacks": {
      "Error": {
        "FieldsFormat": "`fields` must be an array of only strings."
      }
    },
    "PickItemFromActor": {
      "NoItemsOfType": "Selected actor lacks any items of type \"{itemType}\".",
      "FilterUnmatched": "Provided filter produced no valid items.",
      "NoMatchingHeld": "Selected actor is not holding any matching items."
    },
    "User": {
      "Error": {
        "NotAUser": "Provided user was not a foundry User."
      }
    },
    "Error": {
      "UnsupportedDocument": "Document type {type} not supported by this function.",
      "Target": {
        "NotOneTargetted": "Must have exactly one token targetted.",
        "NotAnyTargetted": "Must have at least one token targetted."
      },
      "Token": {
        "Fallback": ", or a token of your assigned character on the current scene",
        "NotAnySelected": "Must have at least one token selected{fallback}.",
        "NotOneSelected": "Must not have more than one token selected."
      },
      "NotADocumentType": "Type {type} is not a valid type of Document.",
      "WrongDocumentTypeRetrieved": "Document retrieved was not of type {type}.",
      "TooEarlyForBanner": "Banner creation aborted because game isn't Ready, attempted type \"{type}\", string: \"{bannerstr}\"",
      "InvalidCamel": "I don't think {camel} is a real camel.",
      "RequiresSystem": "This macro/helper/class is only compatible with the <code>{system}</code> system.",
      "Generic": "You broke something.",
      "BannerType": "Banner type must be one of \"info\", \"warn\", or \"error\".",
      "LogType": "Log type must be one of \"debug\", \"info\", \"warn\", or \"error\".",
      "InvalidType": "Invalid type \"{type}\" provided.",
      "Validation": {
        "FontAwesomeClasses": "\"{string}\" failed to validate as a set of FontAwesome icon classes.",
        "FontAwesomeIcon": "\"{string}\" failed to validate as a FontAwesome icon element."
      },
      "Type": {
        "Of": {
          "TraitSlugs": " of trait slug strings",
          "ButtonLabelStrings": " of button label strings"
        },
        "Array": "`{var}` must be an Array{of}.",
        "User": "`{var}` must be a User or the ID of one.",
        "Folder": "`{var}` must be a Folder document or the ID of one.",
        "Function": "`{var}` must be a Function.",
        "Number": "`{var}` must be a Number.",
        "String": "`{var}` must be a String.",
        "Boolean": "`{var}` must be Boolean."
      }
    },
    "Warning": {
      "Fallback": {
        "BannerType": "Provided notification banner type \"{type}\" is not valid, defaulting to \"{defaultType}\".",
        "FirstTarget": "This operation requires a single target, using first target \"{name}\".",
        "FirstToken": "This operation requires a single selected token, using first token \"{name}\".",
        "LogType": "Provided log type \"{type}\" is not valid, defaulting to \"{defaultType}\".",
        "Type": "Expected parameter \"{var}\" to be of type \"{expected}\", not \"{type}\". Casting.",
        "LevelOutOfBounds": "Provided level ({level}) out of bounds! Defaulting to level 25."
      },
      "SystemBelowVerified": "Your system version ({version}) is older than what Macro & Helper Library is verified for ({verified}). This may cause things to break, or might not; No guarantees."
    },
    "Setting": {
      "LogLevel": {
        "Name": "Default Log Level",
        "Hint": "The default level for mhlog() calls. Setting this to Warning or Error can be helpful with troubleshooting.",
        "Choice": {
          "Debug": "Debug",
          "Info": "Info",
          "Warn": "Warning",
          "Error": "Error"
        }
      },
      "NotifyOnError": {
        "Name": "Banner Notifications",
        "Hint": "Show banner notifications on macro error? (errors will be in console either way)"
      },
      "LegacyAccess": {
        "Name": "Enable legacy access to MHL API",
        "Hint": "Populates `game.pf2emhl`, as is tradition. Available only after the Setup hook."
      },
      "PolluteGlobal": {
        "Name": "Global API access",
        "Hint": "Makes the MHL API accessible via just `mhl` in the global scope. Available only after the Setup hook."
      }
    }
  }
}
